CREATE TABLE IF NOT EXISTS complex_opis_text (
    _id       INTEGER PRIMARY KEY AUTOINCREMENT,
    opis_id   INTEGER NOT NULL,
    text     TEXT NOT NULL,
    colorNum     INTEGER NOT NULL,
    font_size     INTEGER NOT NULL,
    cursive     INTEGER NOT NULL,
    bold     INTEGER NOT NULL
);



selectComplexOpisTextCommonTable:
SELECT complex_opis.*,
        complex_opis_text.text,
        complex_opis_text.colorNum,
        complex_opis_text.font_size,
        complex_opis_text.cursive,
        complex_opis_text.bold
   FROM complex_opis INNER JOIN complex_opis_text ON complex_opis._id = complex_opis_text.opis_id
WHERE  (CASE :name_table WHEN 'spis_next_action_stap'
        THEN (complex_opis.table_name = 'spis_stap_plan' AND complex_opis.item_id
                    IN (SELECT DISTINCT stap_id FROM spis_next_action WHERE stap_id > 0))
        ELSE complex_opis.table_name = :name_table END)
-- WHERE  (CASE :name_table
--     WHEN 'spis_next_action' THEN complex_opis.table_name = :name_table OR
--                                 (complex_opis.table_name = 'spis_stap_plan' AND complex_opis.item_id IN (SELECT DISTINCT stap_id FROM spis_next_action WHERE stap_id > 0))
--                             ELSE complex_opis.table_name = :name_table END)
AND complex_opis._id NOT IN (SELECT opis_id FROM complex_opis_checkbox UNION ALL SELECT opis_id FROM complex_opis_link UNION ALL SELECT opis_id FROM complex_opis_image_group);



selectComplexOpisTextCommonWithId:
SELECT complex_opis.*,
        complex_opis_text.text,
        complex_opis_text.colorNum,
        complex_opis_text.font_size,
        complex_opis_text.cursive,
        complex_opis_text.bold
   FROM complex_opis INNER JOIN complex_opis_text ON complex_opis._id = complex_opis_text.opis_id
WHERE  complex_opis.table_name = (CASE :name_table
    WHEN 'calendar' THEN 'den_plan'
    WHEN 'calendar_napom' THEN 'napom'
    WHEN 'history_plan' THEN 'den_plan'
    WHEN 'history_stap_plan' THEN 'den_plan'
ELSE :name_table END) AND (CASE :name_table
    WHEN 'spis_stap_plan' THEN complex_opis.item_id IN (SELECT _id FROM spis_stap_plan WHERE idplan = :id)
    WHEN 'spis_idea' THEN  complex_opis.item_id IN (SELECT _id FROM spis_idea WHERE bloknot = :id)
    WHEN 'spis_stap_idea' THEN complex_opis.item_id IN (SELECT _id FROM spis_stap_idea WHERE idea_id = :id)
    WHEN 'den_plan' THEN  complex_opis.item_id IN (SELECT _id FROM den_plan WHERE den_plan.data >= :id AND den_plan.data < strftime('%s000', :id / 1000, 'unixepoch', '1 days'))
    WHEN 'napom' THEN complex_opis.item_id IN (SELECT _id FROM napom WHERE ((gotov = 'false' OR gotov = 'False') AND data < :id)
                                                      OR ((data < strftime('%s000', :id / 1000, 'unixepoch', '1 days')) AND data >= :id ))
    WHEN 'calendar' THEN  complex_opis.item_id IN (SELECT _id FROM den_plan WHERE den_plan.data >= :id AND den_plan.data < strftime('%s000', :id / 1000, 'unixepoch', '43 days'))
    WHEN 'calendar_napom' THEN  complex_opis.item_id IN (SELECT _id FROM napom WHERE napom.data >= :id AND napom.data < strftime('%s000', :id / 1000, 'unixepoch', '43 days'))
    WHEN 'history_plan' THEN  complex_opis.item_id IN (SELECT _id FROM den_plan WHERE privplan = :id )
    WHEN 'history_stap_plan' THEN  complex_opis.item_id IN (SELECT _id FROM den_plan WHERE stap_prpl IN (
              WITH RECURSIVE cte AS (SELECT _id FROM spis_stap_plan WHERE _id =  :id UNION ALL
                  SELECT  c._id FROM spis_stap_plan c INNER JOIN cte ON cte._id = c.parent_id ) SELECT _id FROM cte ) )
    ELSE 0 END
    )
AND complex_opis._id NOT IN (SELECT opis_id FROM complex_opis_checkbox UNION ALL SELECT opis_id FROM complex_opis_link UNION ALL SELECT opis_id FROM complex_opis_image_group);

selectDenPlanForHistoryPlan:
SELECT den_plan.*,
IFNULL(spis_plan.name,'') AS nameprpl , IFNULL(spis_stap_plan.name,'') AS namestap
FROM den_plan
LEFT JOIN spis_plan ON den_plan.privplan = spis_plan._id
LEFT JOIN spis_stap_plan ON den_plan.stap_prpl = spis_stap_plan._id
WHERE privplan = :privplan -- den_plan.data >= ? AND den_plan.data < ?
ORDER BY data DESC, time1 DESC;



insertOrReplace{
INSERT OR REPLACE INTO complex_opis_text(
    opis_id,
    text,
    colorNum,
    font_size,
    cursive,
    bold
)
VALUES (:opis_id, :text, :colorNum, :font_size, :cursive, :bold);
INSERT OR REPLACE INTO complex_opis_text_fts4(
    docid,
    text
)
VALUES (:opis_id,:text_fts);
}
-- selectLastId:
-- SELECT last_insert_rowid();
--
-- insertOrReplaceFts4:
-- INSERT OR REPLACE INTO complex_opis_text_fts4(
--     docid,
--     text
-- )
-- VALUES (:docid,:text_fts);


update{
UPDATE complex_opis_text SET
    text = :text,
    colorNum = :colorNum,
    font_size = :font_size,
    cursive = :cursive,
    bold = :bold
WHERE opis_id = :opis_id;
UPDATE complex_opis_text_fts4 SET
                  text = :text_fts
              WHERE docid = :opis_id;
}

CREATE VIRTUAL TABLE IF NOT EXISTS complex_opis_text_fts4 USING FTS4 (
--     content='spis_stap_idea',
    text TEXT
);

-- delete:
-- DELETE FROM complex_opis_text WHERE _id = :id;


-- Триггер: replicated_insert_complex_opis_text_trig
CREATE TRIGGER replicated_insert_complex_opis_text_trig
         AFTER INSERT
            ON complex_opis_text
      FOR EACH ROW
BEGIN
    INSERT OR IGNORE INTO system_replicate_record VALUES (
                                                      'complex_opis_text',
                                                      new._id,
                                                      'false'
                                                  );
END;


-- Триггер: replicated_update_complex_opis_text_trig
CREATE TRIGGER replicated_update_complex_opis_text_trig
         AFTER UPDATE
            ON complex_opis_text
      FOR EACH ROW
BEGIN
    INSERT OR IGNORE INTO system_replicate_record VALUES (
                                                      'complex_opis_text',
                                                      new._id,
                                                      'false'
                                                  );
    INSERT OR IGNORE INTO system_replicate_record VALUES (
                                                      'complex_opis_text',
                                                      old._id,
                                                      'false'
                                                  );
END;


-- Триггер: replicated_delete_complex_opis_text_trig
CREATE TRIGGER replicated_delete_complex_opis_text_trig
         AFTER DELETE
            ON complex_opis_text
      FOR EACH ROW
BEGIN
    INSERT OR IGNORE INTO system_replicate_record VALUES (
                                                      'complex_opis_text',
                                                      old._id,
                                                      'false'
                                                  );
END;

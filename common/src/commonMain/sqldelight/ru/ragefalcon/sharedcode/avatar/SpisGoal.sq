-- Таблица: spis_goal
CREATE TABLE spis_goal (
    _id   INTEGER PRIMARY KEY AUTOINCREMENT,
    lvl   INTEGER NOT NULL,
    name  TEXT NOT NULL,
    data1 INTEGER NOT NULL,
    data2 INTEGER NOT NULL,
    opis  TEXT NOT NULL,
    gotov REAL NOT NULL,
    foto  INTEGER NOT NULL
);

-- CREATE TEMP TABLE indenplan(
--   _id INTEGER  NOT NULL,
--   name TEXT  NOT NULL,
--   sum_hour REAL  NOT NULL,
--   data INTEGER  NOT NULL
-- );

insertOrReplaceGoals:
INSERT OR REPLACE INTO spis_goal(
     lvl,
     name,
     data1,
     data2,
     opis,
     gotov,
     foto
                )
VALUES (0, ?, ?, ?, ?, ?, ?);

changeLvlToUp{
    UPDATE spis_goal SET lvl = lvl-1 WHERE lvl <= :newsort AND lvl > :oldsort ;
    UPDATE spis_goal SET lvl = :newsort WHERE _id = :id;
}
changeLvlToDown{
    UPDATE spis_goal SET lvl = lvl+1 WHERE lvl < :oldsort AND lvl >= :newsort ;
    UPDATE spis_goal SET lvl = :newsort WHERE _id = :id;
-- 11 22 33 44 55
--
-- 11 52 23 34 45
-- 5 - new 2 old 5
--
-- 11 32 43 54 25
-- 2 - new 5 old 2
}

updateGoals:
UPDATE spis_goal SET
--                   lvl = :lvl,
                  name = :name,
                  data1 = :data1,
                  data2 = :data2,
                  opis = :opis,
                  foto = :foto
              WHERE _id = :id;

updateGotovGoal:
UPDATE spis_goal SET gotov = :gotov WHERE _id = :id;


deleteGoal{
DELETE FROM spis_goal  WHERE _id = :id;
DELETE FROM bind_for_schet_plan WHERE element_id = :id AND type_element = :typeGoalId;
}

selectGoals:
SELECT spis_goal.*, spis_schet_pl.open, spis_schet_pl.min_aim,spis_schet_pl.max_aim,sum_on_schet_pl.summa,
                 (SELECT TOTAL(sumrub) FROM rasxod WHERE schpl_id = sum_on_schet_pl._id) AS sumRasxod,
--SELECT *,
(SELECT TOTAL(hour) AS obs FROM (SELECT hour FROM  sum_hour_stap_plan,spis_plan_goal WHERE spis_goal._id = spis_plan_goal.id_goal AND spis_plan_goal.stap = sum_hour_stap_plan._id UNION
 SELECT hour FROM hour_plan,spis_plan_goal WHERE  spis_goal._id = spis_plan_goal.id_goal AND hour_plan._id = spis_plan_goal.id_plan AND spis_plan_goal.stap = 0) ) AS hour

FROM spis_goal
LEFT JOIN  bind_for_schet_plan ON spis_goal._id = bind_for_schet_plan.element_id AND bind_for_schet_plan.type_element = :typeGoalId
LEFT JOIN spis_schet_pl ON spis_schet_pl._id = bind_for_schet_plan.schet_plan_id
LEFT JOIN sum_on_schet_pl ON sum_on_schet_pl._id = bind_for_schet_plan.schet_plan_id
WHERE gotov <> :gotov ORDER BY lvl;

-- updateTempHourGoal{
-- DELETE FROM indenplan;
-- -- CREATE TEMP IF NOT EXISTS TABLE indenplan AS  SELECT _id,name,sum_hour,data FROM den_plan WHERE (privplan IN (SELECT id_plan FROM spis_plan_goal WHERE  id_goal = 4465 AND stap = 0) OR stap_prpl IN (WITH RECURSIVE cte AS (SELECT spis_stap_plan._id
-- --      	FROM spis_stap_plan WHERE spis_stap_plan._id IN (SELECT stap FROM spis_plan_goal WHERE  id_goal = 4465 AND stap <> 0 )
-- --      	 UNION ALL SELECT c._id FROM spis_stap_plan c INNER JOIN cte p ON p._id = c.parent_id )
-- -- 			   SELECT _id FROM cte));
--       INSERT INTO indenplan(_id,name,sum_hour,data)
--         SELECT _id,name,sum_hour,data FROM den_plan WHERE (
--                     privplan IN (SELECT id_plan FROM spis_plan_goal WHERE  id_goal = :idgoal AND stap = 0)
--                     OR
--                     stap_prpl IN (WITH RECURSIVE cte AS (SELECT spis_stap_plan._id
--      	                            FROM spis_stap_plan WHERE spis_stap_plan._id IN (SELECT stap FROM spis_plan_goal WHERE  id_goal = :idgoal AND stap <> 0 )
--      	                              UNION ALL SELECT c._id FROM spis_stap_plan c INNER JOIN cte ON cte._id = c.parent_id )
-- 			                         SELECT _id FROM cte)
-- 			        );
-- }

selectHourGoalDream:
WITH stapin(_id) AS (WITH RECURSIVE cte AS (SELECT spis_stap_plan._id
                     	                            FROM spis_stap_plan WHERE spis_stap_plan._id IN (SELECT stap FROM spis_plan_goal WHERE  id_goal = :idgoal AND stap <> 0 )
                     	                              UNION ALL SELECT c._id FROM spis_stap_plan c INNER JOIN cte ON cte._id = c.parent_id )
                			                         SELECT _id FROM cte
                			                         ),
     inden_plan(_id,name,sum_hour,data) AS (SELECT _id,name,sum_hour,data FROM den_plan WHERE (
                                              privplan IN (SELECT id_plan FROM spis_plan_goal WHERE  id_goal = :idgoal AND stap = 0)
                                              OR
                                              stap_prpl IN stapin))
	SELECT (SELECT TOTAL(sum_hour) FROM inden_plan WHERE
        data > strftime('%s000', :now_date / 1000, 'unixepoch', '-7 days')
        AND
        data <= :now_date
        ) AS sum_week,
  (SELECT TOTAL(sum_hour) FROM inden_plan WHERE
        data > strftime('%s000', :now_date / 1000, 'unixepoch', '-1 month')
        AND
        data <= :now_date
  ) AS sum_month,
  (SELECT TOTAL(sum_hour) FROM inden_plan WHERE
        data > strftime('%s000', :now_date / 1000, 'unixepoch', '-1 year')
        AND
        data <= :now_date
  ) AS sum_year,
  (SELECT TOTAL(sum_hour) FROM inden_plan
  ) AS sum_all,
  (SELECT COUNT(*) FROM spis_plan_goal WHERE id_goal = :idgoal) AS privscount;


-- Триггер: lvl_insert_spis_goal_trig
CREATE TRIGGER IF NOT EXISTS lvl_insert_spis_goal_trig
         AFTER INSERT
            ON spis_goal
      FOR EACH ROW
BEGIN
    UPDATE spis_goal SET lvl = new._id WHERE _id = new._id;
END;



-- Триггер: replicated_insert_spis_goal_trig
CREATE TRIGGER IF NOT EXISTS delete_privs_goal
         AFTER DELETE
            ON spis_goal
BEGIN
    DELETE FROM spis_plan_goal WHERE id_goal = old._id;
    DELETE FROM spis_idea_goal WHERE id_goal = old._id;
END;

-- Триггер: replicated_insert_spis_goal_trig
CREATE TRIGGER replicated_insert_spis_goal_trig
         AFTER INSERT
            ON spis_goal
      FOR EACH ROW
BEGIN
    INSERT OR IGNORE INTO system_replicate_record VALUES (
                                                      'spis_goal',
                                                      new._id,
                                                      'false'
                                                  );
END;


-- Триггер: replicated_update_spis_goal_trig
CREATE TRIGGER replicated_update_spis_goal_trig
         AFTER UPDATE
            ON spis_goal
      FOR EACH ROW
BEGIN
    INSERT OR IGNORE INTO system_replicate_record VALUES (
                                                      'spis_goal',
                                                      new._id,
                                                      'false'
                                                  );
    INSERT OR IGNORE INTO system_replicate_record VALUES (
                                                      'spis_goal',
                                                      old._id,
                                                      'false'
                                                  );
END;


-- Триггер: replicated_delete_spis_goal_trig
CREATE TRIGGER replicated_delete_spis_goal_trig
         AFTER DELETE
            ON spis_goal
      FOR EACH ROW
BEGIN
    INSERT OR IGNORE INTO system_replicate_record VALUES (
                                                      'spis_goal',
                                                      old._id,
                                                      'false'
                                                  );
END;

